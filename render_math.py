from manim import *  # type: ignore
import os
import shutil
from PIL import Image
from pathlib import Path

import subprocess
import cv2
import numpy as np

# config.background_color = "#000000"
config.media_dir = "./media"  # –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º –º–µ–¥–∏–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é


class Formula(Scene):
    def construct(self):
        circle = Circle()  # —Å–æ–∑–¥–∞—Ç—å –æ–±—å–µ–∫—Ç
        circle.set_fill(BLUE, opacity=0.5)  # —É—Å—Ç–∞–Ω–æ–∏—Ç—å —Ü–≤–µ—Ç –∏ –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å

        square = Square()
        square.shift(2 * LEFT) # –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å
        square.rotate(PI/4) # –ø–æ–≤–µ—Ä–Ω—É—Ç—å –æ–±—å–µ–∫—Ç

        circle.next_to(square, RIGHT, buff=0.5)  # –ø–æ–∑–∏—Ü–∏—è —Å–ø—Ä–∞–≤–∞ –æ—Ç –∫–≤–∞–¥—Ä–∞—Ç–∞

        self.play(Create(circle), Create(square))  # –ø–æ–∫–∞–∑–∞—Ç—å —Ñ–∏–≥—É—Ä—ã
        self.play(square.animate.rotate(PI/4))  # –∞–Ω–∏–º–∞—Ü–∏—è –ø–æ–≤–æ—Ä–æ—Ç–∞
        Wait(1) # –ø–∞—É–∑–∞
        self.play(Rotate(square, angle=PI)) # –¥—Ä—É–≥–∞—è –∞–Ω–∏–º–∞—Ü–∏—è –ø–æ–≤–æ—Ä–æ—Ç–∞

        




def crop_video(input_path, size, crop_mode='center', replace_original=False):
    """
    –û–±—Ä–µ–∑–∞–µ—Ç –≤–∏–¥–µ–æ –¥–æ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º FFmpeg.
    
    Args:
        input_path (str): –ü—É—Ç—å –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É –≤–∏–¥–µ–æ—Ñ–∞–π–ª—É
        size: –ú–æ–∂–µ—Ç –±—ã—Ç—å:
              - tuple (width, height) –¥–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π –æ–±—Ä–µ–∑–∫–∏
              - tuple (left, top, right, bottom) –¥–ª—è –æ–±—Ä–µ–∑–∫–∏ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –æ—Ç—Å—Ç—É–ø–æ–≤
        crop_mode (str): –†–µ–∂–∏–º –æ–±—Ä–µ–∑–∫–∏ ('center', 'top_left', 'top_right', 'bottom_left', 'bottom_right')
                        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ size=(width, height)
        replace_original (bool): –ó–∞–º–µ–Ω—è—Ç—å –ª–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –≤–∏–¥–µ–æ (True) –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –∫–æ–ø–∏—é (False)
    
    Returns:
        str: –ü—É—Ç—å –∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–º—É –≤–∏–¥–µ–æ—Ñ–∞–π–ª—É
    """
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
    if not os.path.isfile(input_path):
        raise FileNotFoundError(f"–§–∞–π–ª {input_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç size
    if len(size) == 2:
        # –†–µ–∂–∏–º (width, height)
        width, height = size
        mode = 'dimensions'
    elif len(size) == 4:
        # –†–µ–∂–∏–º (left, top, right, bottom)
        left, top, right, bottom = size
        mode = 'margins'
    else:
        raise ValueError("size –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å tuple (width, height) –∏–ª–∏ (left, top, right, bottom)")
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ
    try:
        cmd_info = [
            'ffprobe', 
            '-v', 'error',
            '-select_streams', 'v:0',
            '-show_entries', 'stream=width,height',
            '-of', 'csv=p=0',
            input_path
        ]
        result = subprocess.run(cmd_info, capture_output=True, text=True, check=True)
        orig_width, orig_height = map(int, result.stdout.strip().split(','))
    except Exception as e:
        raise ValueError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ: {e}")
    
    print(f"–ò—Å—Ö–æ–¥–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {orig_width}x{orig_height}")
    
    # –í—ã—á–∏—Å–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—Ä–µ–∑–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
    if mode == 'dimensions':
        # –†–µ–∂–∏–º (width, height)
        print(f"–¶–µ–ª–µ–≤–æ–π —Ä–∞–∑–º–µ—Ä: {width}x{height}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä—ã
        if width > orig_width or height > orig_height:
            raise ValueError(f"–ó–∞–ø—Ä–æ—à–µ–Ω–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã ({width}x{height}) –±–æ–ª—å—à–µ –∏—Å—Ö–æ–¥–Ω—ã—Ö ({orig_width}x{orig_height})")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ–±—Ä–µ–∑–∫–∏
        if crop_mode == 'center':
            x = (orig_width - width) // 2
            y = (orig_height - height) // 2
        elif crop_mode == 'top_left':
            x = 0
            y = 0
        elif crop_mode == 'top_right':
            x = orig_width - width
            y = 0
        elif crop_mode == 'bottom_left':
            x = 0
            y = orig_height - height
        elif crop_mode == 'bottom_right':
            x = orig_width - width
            y = orig_height - height
        else:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ä–µ–∂–∏–º –æ–±—Ä–µ–∑–∫–∏. –î–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: 'center', 'top_left', 'top_right', 'bottom_left', 'bottom_right'")
        
        crop_filter = f"crop={width}:{height}:{x}:{y}"
        print(f"–†–µ–∂–∏–º –æ–±—Ä–µ–∑–∫–∏: {crop_mode}")
        print(f"–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ–±—Ä–µ–∑–∫–∏: x={x}, y={y}")
        
    else:
        # –†–µ–∂–∏–º (left, top, right, bottom)
        print(f"–û—Ç—Å—Ç—É–ø—ã: left: {left}, top: {top}, right: {right}, bottom: {bottom}")
        
        # –í—ã—á–∏—Å–ª—è–µ–º —à–∏—Ä–∏–Ω—É –∏ –≤—ã—Å–æ—Ç—É –æ–±—Ä–µ–∑–∞–Ω–Ω–æ–≥–æ –≤–∏–¥–µ–æ
        width = orig_width - left - right
        height = orig_height - top - bottom
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –æ—Ç—Å—Ç—É–ø–æ–≤
        if width <= 0 or height <= 0:
            raise ValueError(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –æ—Ç—Å—Ç—É–ø—ã. –†–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–∏–π —Ä–∞–∑–º–µ—Ä: {width}x{height}")
        
        if left < 0 or top < 0 or right < 0 or bottom < 0:
            raise ValueError("–û—Ç—Å—Ç—É–ø—ã –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º–∏")
        
        if width > orig_width or height > orig_height:
            raise ValueError(f"–†–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–∏–π —Ä–∞–∑–º–µ—Ä ({width}x{height}) –±–æ–ª—å—à–µ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ ({orig_width}x{orig_height})")
        
        crop_filter = f"crop={width}:{height}:{left}:{top}"
        print(f"–†–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–∏–π —Ä–∞–∑–º–µ—Ä: {width}x{height}")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—ã—Ö–æ–¥–Ω–æ–π –ø—É—Ç—å
    if replace_original:
        output_path = input_path
        temp_path = input_path + '.temp.mp4'
    else:
        input_path_obj = Path(input_path)
        output_path = str(input_path_obj.parent / f"{input_path_obj.stem}_cropped{input_path_obj.suffix}")
        temp_path = output_path
    
    # –°—Ç—Ä–æ–∏–º –∫–æ–º–∞–Ω–¥—É FFmpeg
    cmd = [
        'ffmpeg',
        '-i', input_path,           # –í—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª
        '-vf', crop_filter,         # –§–∏–ª—å—Ç—Ä –æ–±—Ä–µ–∑–∫–∏
        '-c:a', 'copy',             # –ö–æ–ø–∏—Ä—É–µ–º –∞—É–¥–∏–æ –±–µ–∑ –ø–µ—Ä–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è
        '-y',                       # –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –≤—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª
        temp_path
    ]
    
    print(f"–ö–æ–º–∞–Ω–¥–∞: {' '.join(cmd)}")
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º FFmpeg
        result = subprocess.run(cmd, capture_output=True, text=True, check=True)
        
        # –ï—Å–ª–∏ –∑–∞–º–µ–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª, –ø–µ—Ä–µ–º–µ—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        if replace_original:
            os.replace(temp_path, output_path)
        
        print("‚úÖ –í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–µ–∑–∞–Ω–æ!")
        print(f"üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {output_path}")
        
        return output_path
        
    except subprocess.CalledProcessError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ FFmpeg: {e}")
        print(f"Stderr: {e.stderr}")
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –µ—Å–ª–∏ –æ–Ω —Å–æ–∑–¥–∞–ª—Å—è
        if os.path.exists(temp_path):
            os.remove(temp_path)
        return None


def find_black_borders(video_path, sample_frames=10, threshold=10):
    """
    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ä–∞–∑–º–µ—Ä —á—ë—Ä–Ω—ã—Ö –ø–æ–ª–µ–π –≤–æ–∫—Ä—É–≥ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤ –≤–∏–¥–µ–æ.
    
    Args:
        video_path (str): –ü—É—Ç—å –∫ –≤–∏–¥–µ–æ—Ñ–∞–π–ª—É
        sample_frames (int): –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–¥—Ä–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        threshold (int): –ü–æ—Ä–æ–≥ —á–µ—Ä–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞ (0-255)
    
    Returns:
        dict: {'left': int, 'top': int, 'right': int, 'bottom': int}
    """
    cap = cv2.VideoCapture(video_path)
    borders = []
    
    total_frames = int(cap.get(cv2.CAP_PROP_FRAME_COUNT))
    step = max(1, total_frames // sample_frames)
    
    for i in range(sample_frames):
        cap.set(cv2.CAP_PROP_POS_FRAMES, i * step)
        ret, frame = cap.read()
        
        if not ret:
            continue
            
        gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
        
        # –ù–∞—Ö–æ–¥–∏–º –≥—Ä–∞–Ω–∏—Ü—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        left = np.argmax(gray.max(axis=0) > threshold)
        right = gray.shape[1] - np.argmax(gray.max(axis=0)[::-1] > threshold)
        top = np.argmax(gray.max(axis=1) > threshold)
        bottom = gray.shape[0] - np.argmax(gray.max(axis=1)[::-1] > threshold)
        
        borders.append((left, top, gray.shape[1] - right, gray.shape[0] - bottom))
    
    cap.release()
    
    # –£—Å—Ä–µ–¥–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –≤—Å–µ–º –∫–∞–¥—Ä–∞–º
    avg_borders = np.mean(borders, axis=0).astype(int)
    return avg_borders.tolist()


def ctext(text, color: str = 'reset', style: str = 'reset') -> str:
    """–û–ø–∏—Å–∞–Ω–∏–µ:
        –§—É–Ω–∫—Ü–∏—è –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤—ã–≤–æ–¥–∏—Ç—å —Ç–µ–∫—Å—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º —Ü–≤–µ—Ç–æ–º –∏ —Å—Ç–∏–ª–µ–º –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ.

    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
        text (any): –¢–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –≤—ã–≤–µ—Å—Ç–∏ —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º —Ü–≤–µ—Ç–æ–º –∏ —Å—Ç–∏–ª–µ–º
        color (str): –¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞. –ú–æ–∂–µ—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è:
            - 'black': —á–µ—Ä–Ω—ã–π
            - 'red': –∫—Ä–∞—Å–Ω—ã–π
            - 'green': –∑–µ–ª–µ–Ω—ã–π
            - 'yellow': –∂–µ–ª—Ç—ã–π
            - 'blue': —Å–∏–Ω–∏–π
            - 'purple': —Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π
            - 'grey': —Å–µ—Ä—ã–π
            - 'dark_grey': —Ç—ë–º–Ω–æ-—Å–µ—Ä—ã–π
            - 'cyan': –≥–æ–ª—É–±–æ–π
            - 'white': –±–µ–ª—ã–π
            - 'reset': —Å–±—Ä–æ—Å–∏—Ç—å —Ü–≤–µ—Ç –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
        style (str): –°—Ç–∏–ª—å —Ç–µ–∫—Å—Ç–∞. –ú–æ–∂–µ—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è:
            - 'bold': –∂–∏—Ä–Ω—ã–π
            - 'italic': –∫—É—Ä—Å–∏–≤–Ω—ã–π
            - 'underline': –ø–æ–¥—á–µ—Ä–∫–Ω—É—Ç—ã–π
            - 'strikethrough': –∑–∞—á—ë—Ä–∫–Ω—É—Ç—ã–π
            - 'frame': —Ç–µ–∫—Å—Ç –≤ —Ä–∞–º–∫–µ
            - 'reset': —Å–±—Ä–æ—Å–∏—Ç—å —Å—Ç–∏–ª—å –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        str: –°—Ç—Ä–æ–∫–∞ —Å –ø—Ä–∏–º–µ–Ω–µ–Ω–Ω—ã–º –∫ –Ω–µ–π —Ü–≤–µ—Ç–æ–º –∏ —Å—Ç–∏–ª–µ–º.
    """
    styles = {
        'bold': '\033[1m',
        'italic': '\033[3m',
        'underline': '\033[4m',
        'strikethrough': '\033[9m',
        'frame': '\033[51m',
        'reset': '\033[0m'
    }
    colors = {
        'black': '\033[30m',
        'red': '\033[31m',
        'green': '\033[32m',
        'yellow': '\033[93m',
        'blue': '\033[94m',
        'purple': '\033[35m',
        'cyan': '\033[36m',
        'grey': '\033[37m',
        'dark_grey': '\033[90m',
        'darkgrey': '\033[90m',
        'reset': '\033[0m'
    }

    if color not in colors or style not in styles:
        return str(text)  # –í—ã–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, –µ—Å–ª–∏ —Ü–≤–µ—Ç –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω
    else:
        return f"{styles[style]}{colors[color] if color != 'reset' else ''}{str(text)}\033[0m"


def createAnim(formula_name: str, outpath: str = "math", image_mode: bool = False, 
         video_mode: bool = False, quality: str = "l"):
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
    
    Args:
        formula_name: –Ω–∞–∑–≤–∞–Ω–∏–µ –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        outpath: –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        image_mode: —Ä–µ–Ω–¥–µ—Ä–∏—Ç—å –ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        video_mode: —Ä–µ–Ω–¥–µ—Ä–∏—Ç—å –ª–∏ –≤–∏–¥–µ–æ
        quality: –∫–∞—á–µ—Å—Ç–≤–æ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ ('l' - low, 'm' - medium, 'h' - high, 'p' - production)
    """
    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Ç–µ–∫—É—â–µ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞
    file_name = os.path.basename(__file__)
    
    # –°–æ–∑–¥–∞–µ–º —Ü–µ–ª–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    target_dir = Path(outpath)
    target_dir.mkdir(parents=True, exist_ok=True)
    
    image_mode = image_mode or not video_mode
    print(f"–†–µ–∂–∏–º—ã - –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {image_mode}, –í–∏–¥–µ–æ: {video_mode}, –ö–∞—á–µ—Å—Ç–≤–æ: {quality}")

    # –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    if image_mode:
        print("–†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")
        
        # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ PNG —Å –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–º —Ñ–æ–Ω–æ–º
        cmd = f"manim -q{quality} {file_name} Formula --format=png --transparent"
        os.system(cmd)
        
        # –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–π PNG
        media_dir = Path(f"media/images/{file_name[:-3]}")
        if media_dir.exists():
            png_files = list(media_dir.glob("*.png"))
            if png_files:
                png_files.sort(key=lambda x: x.stat().st_mtime, reverse=True)
                last_png = png_files[0]
                
                # –û–±—Ä–µ–∑–∫–∞ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É —Å –æ—Ç—Å—Ç—É–ø–æ–º
                img = Image.open(last_png)
                alpha = img.split()[-1]
                bbox = alpha.getbbox()
                
                if bbox:
                    left, upper, right, lower = bbox
                    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—Ç—É–ø 20 –ø–∏–∫—Å–µ–ª–µ–π
                    padding = 20
                    left = max(left - padding, 0)
                    upper = max(upper - padding, 0)
                    right = min(right + padding, img.width)
                    lower = min(lower + padding, img.height)
                    img_cropped = img.crop((left, upper, right, lower))
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–µ–∑–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                    target_path = target_dir / f"{formula_name}.png"
                    img_cropped.save(target_path)
                    print(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {target_path}")
    
    # –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –≤–∏–¥–µ–æ
    if video_mode:
        print("–†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –≤–∏–¥–µ–æ...")
        
        # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –≤–∏–¥–µ–æ (–±–µ–∑ –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏, —Ç–∞–∫ –∫–∞–∫ mp4 –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∞–ª—å—Ñ—É)
        cmd = f"manim -q{quality} {file_name} Formula --format=mp4"
        os.system(cmd)
        
        # –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤–∏–¥–µ–æ
        media_dir = Path(f"media/videos/{file_name[:-3]}")
        if media_dir.exists():
            mp4_files = list(media_dir.glob("**/*.mp4"))
            if mp4_files:
                mp4_files.sort(key=lambda x: x.stat().st_mtime, reverse=True)
                last_mp4 = mp4_files[0]
                
                # –ö–æ–ø–∏—Ä—É–µ–º –≤ —Ü–µ–ª–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
                target_mp4 = target_dir / f"{formula_name}.mp4"
                shutil.copy2(last_mp4, target_mp4)
                print(f"–í–∏–¥–µ–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {target_mp4}")

                # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–±—Ä–µ–∑–∫–∞
                # cropped_mp4 = target_dir / f"{formula_name}_cropped.mp4"
                # crop_video(target_mp4, cropped_mp4)


def cleanup():    
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤, —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö Manim
    """
    # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    cleanup_dirs = ["videos", "images", "Tex", "texts"]
    for dir_path in cleanup_dirs:
        dir_path = Path(f"media/{dir_path}")
        if dir_path.exists():
            shutil.rmtree(dir_path)
            print(f"–û—á–∏—â–µ–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {dir_path}")


class Config:
    # ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
    # ‚ïë –ü—É—Ç–∏ –∏ –∏–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤   ‚ïë
    # ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
    path = "media"              # –ö–æ—Ä–Ω–µ–≤–∞—è –ø–∞–ø–∫–∞ –¥–ª—è –º–µ–¥–∏–∞
    out_folder = "manim"        # –ü–∞–ø–∫–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ md —Ñ–∞–π–ª–∞
    anim_name = "anim1"          # –ò–º—è –∞–Ω–∏–º–∞—Ü–∏–∏

    # ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
    # ‚ïë –†–µ–∂–∏–º—ã —Ä–∞–±–æ—Ç—ã         ‚ïë
    # ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
    video_mode = True           # –†–µ–Ω–¥–µ—Ä–∏—Ç—å –≤–∏–¥–µ–æ
    image_mode = False          # –†–µ–Ω–¥–µ—Ä–∏—Ç—å –æ–¥–∏–Ω–æ—á–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    quality = "h"               # –ö–∞—á–µ—Å—Ç–≤–æ: l - low, m - medium, h - high, p - production

    # ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
    # ‚ïë –û–±—Ä–µ–∑–∫–∞ –≤–∏–¥–µ–æ         ‚ïë
    # ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
    crop = 0                 # –í–∫–ª—é—á–∏—Ç—å –æ–±—Ä–µ–∑–∫—É
    offset = [0, 0, 0, 0]       # –°–º–µ—â–µ–Ω–∏–µ –≥—Ä–∞–Ω–∏—Ü: left, top, right, bottom
    sample_frames = 10          # –°–∫–æ–ª—å–∫–æ –∫–∞–¥—Ä–æ–≤ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–ª—è –ø–æ–∏—Å–∫–∞ –≥—Ä–∞–Ω–∏—Ü

    # ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
    # ‚ïë –û—Ç–ª–∞–¥–∫–∞ –∏ –æ—á–∏—Å—Ç–∫–∞     ‚ïë
    # ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
    debug = False                # –í–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏ (–Ω–µ –∑–∞–º–µ–Ω—è–µ—Ç –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª)
    clean = True                # –£–¥–∞–ª—è—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –ø–æ—Å–ª–µ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞



if __name__ == "__main__":
    config = Config()
    final_path = f"{config.path}/{config.out_folder}/{config.anim_name}.mp4"
    
    # 1. –†–µ–Ω–¥–µ—Ä–∏–Ω–≥, –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if os.path.exists(final_path):
        print(ctext("–ê–Ω–∏–º–∞—Ü–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç", "green", "bold"))
    else:
        createAnim(config.anim_name, outpath=f"{config.path}/{config.out_folder}", 
             image_mode=config.image_mode, video_mode=config.video_mode, quality=config.quality)
    
    # 2. –û–±—Ä–µ–∑–∫–∞ –≤–∏–¥–µ–æ
    if config.crop:
        # detected_borders = find_black_borders(final_path, sample_frames=config.sample_frames)
        # crop_values = [a + b for a, b in zip(config.offset, detected_borders)]
        crop_values = config.offset
        crop_video(final_path, crop_values, crop_mode="center", replace_original=not config.debug)
    
    # 3. –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    if config.clean:
        cleanup()

